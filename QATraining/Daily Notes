What is java ?  
Java is a programming language. Initially it was owned by Sun Microsystems and now maintained by oracle. Latest version of java is java19

Where is java used?

Mobile devices - android
desktop / standalone application - ms office, windows media player, photoshop
Web based application - automation test store etc
Gaming related application 
Database related applications  - 

Why java ?

It can run on multiple platforms like windows, mac, linux, redhat etc…
Simple and easy to understand and learn
It is an open source and freeware
It is secure and fast
There is a lot of community support
It is object oriented


public class MyFirstJavaProgram {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
System.out.println("hello amit   welcome to java series");
	}

}




GIT - Version controlling 


Green 
Red
Yellow
Green

Using git we will be able to maintain multiple versions of a particular software very easily
In a realtime environment with git it is easy to share the project changes in files among all the team members.


Remote repo : git hub
Local repo : laptop


Git add . : it will move all the changes from local repo to staging area
Git commit -m “commit message” : it will commit all the changes moved to staging area
Git push : it will move the changes from local repo to remote repo
Git pull : it will move the changes from  remote repo to  local repo 


Java Variable.
variables are used for storing the data either temporarily or permanantly. 

x=10;
x=20;

String : stores text
note : every string value in java should be enclosed with in " " 
int : it will store whole numbers
float : it will store decimal values
char : it will store a single character
boolean : either true or false


syntax for writing variables

<data type> <variable name> = <value>;

note :  in java every statement should end with a semicolon";"


when we want to assign a value to a variable permanantly the that variable has to be declared as final.



Java Identifiers:
==================
java identifiers are nothing but the variable names.
each variable name in java must be unique.

some additional rules for java identifiers
1)identifiers names should only contain letters, digits,underscore and dollar sign only
2)identifiers name should begin with a letter
3) Spaces are not allowed
4)there are 53 reserved words in java, these reserved words cannot be used as identifiers



Java Data Types
===============

data type in java will specify the type of data a variable stores/holds

in java there are 8 primitive data types

whole numbers :

byte  : 1 byte - -127 to 126
short : 2 bytes
int : 4 bytes
long : 8 bytes 

decimals :


float : 4 bytes
double : 8 bytes

single alphabets ::

char


true or false :: 

boolean



non primitive data types ::

String is a non primitive data type 




Type Casting :  
=============


type casting is assigning a value of one data type to another

there are two types of type casting

narrowing ::  assigning a larger data type to smaller data type  
widening :: assigning a smaller data type to larger data type  



operators : operators in java are used to perform oprations in java code
there are multiple types of java operators

1) Arithmatic operators :

Additon :   +
substraction : -
multiplication : *
division : / (quotient)
mudulos : % (reminder)
increment : ++
note : there are two types of increment operators - 
pre increment  : the values of variable is first incremented and use later(int variable1 =10; ++variable1;)
and 
post increment : the values of variable are first used and incremented later(int variable1 =10; variable1++;)


decrement : --

int z = x+y;
operator : +
operands : x,y,z;



2) Assignment operators : these operators are used to assign values to variables

= : normal assignment operator int x =23;
+= : incremental assignment operator x += 23;  // x = x+23;  // 46
-= : decremental assignment operator x -= 23  // x = x-23; // 23
*= : multiplicative assignment operator x *= 2 // x = x*2  // 46
/= : division assignment operator x /= 2 // x = x/2 ; 23
%= : mudulos assignment operator x %= 10 // x = x%10 ; // 3



3) Comparision operators : these are used to compare the values in between two variables

note : the result of comparision operation is always boolean(either true or false)


 == : this will check if the values of both the variables is equal or not // int x = 1,y=2; x == y; // false
 != : not equals to operator  // int x = 1,y=2; x != y;  // true
 > : greater than operator
 < : less than operator
 >= : greater than or equals to operator
 <=  : less than or equals to operator
 
 
 4) Logical Operators : these are used for performing logical operations in java programming
 
 note : the operands for logical operations should be boolean
 
 logical AND :  && : when both the values are true then the result is true else it will false
 logical OR :  ||  : if atlease one value is true then result is true
 logical NOT : !   : it will reverse the result. 
 
 
 
 
 
 STRING
 
 
 
 in strings are used to represent text, these are collection of characters
 
 
 String my_name = "amit sethi";
 
 
 String is a class in java
 
 length() : this will return the length of given string i.e no of characters
 toUpperCase() : this will convert the lowercase characters in a given string to upper case characters
 toLowerCase() : this will convert the upper case characters in a given string to lowercase characters
 indexOf(char) : it will take an character and argumnet and return the position of it in the string 
  
 other methods are available at “https://www.w3schools.com/java/java_ref_string.asp”
 
 
 String concatination : 
 
 concatination operator :  +
 
 	String s1 = "hello";
		int i = 10,j=2,k=3;
		System.out.println(s1+i+j+k); // hello1023
		System.out.println(i+j+k+s1); // 15hello
		
		


CONDITIONAL STATEMENTS and LOOPS



CONDITIONAL STATEMENTS

if  : if the conditon written is executed to true then the if body is executed

if(condition)
{
//code
}

if else : if the condition written in true the if body is executed, if the conditon written is false the else body will be executed

if(condition)
{
//code 1
}
else
{
//code 2
}


else if   :  we can use this else if to check multiple conditions

if(condition1)
{
}
else if(condition 2)
{
}
else if(condition 3)
{
}
.
.
.
.
.
else if(condition n)
{
}
else
{
}


switch : is alos an java conditional statement which can be used to evaluate multiple conditons.


switch(expression)
{
case expression_result1 :
//case body;
break;
case expression_result2 :
//case body;
break;
.
.
.
.
case expression_resultn :
//case body;
break;
default :
//default body;
break;
}



LOOPS

while loop : entry controlled loop

while(condition)
{
// code when condition is executed to true
}

note : the result of condition is always a boolean values(true,false)





do while loop : exit controlled loop

do
{
//loop body
}while(condition);



for loop :

for(initialization;condition;increment/decrement)
{

// loop body when the condition is true

}

for each loop : 


int[]  rollnumbers = {10,25,14,78,965};

for(data type variable name : array name)
{
// body of the loop
}


for(int x : rollnumbers)
{
System.out.println(x);
}

Arrays


ctrl+fn+f11  - run the java program



Array:   these arrays are used to store multiple values of the same datatype in a single variable.

int x = 10;

{10,25,14,78,965....}

declaring and initializing an array

int[]  rollnumbers = {10,25,14,78,965};



String[]  studentnames = {"amit","suresh","murugan","krishna","chinmay"};

float[] marks = {45.23,78.26,45.27};


reading values from the array

int[]  rollnumbers = {10,25,14,78,965};


rollnumbers[0]; //10
rollnumbers[1]; //25
rollnumbers[2]; //14
rollnumbers[3]; //78
rollnumbers[4]; //965





String[]  studentnames = {"amit","suresh","murugan","krishna","chinmay"};

studentnames[0]; //amit
studentnames[1]; //suresh
studentnames[4]; //chinmay



int[] rollnumbers = new int[5];
 
 rollnumbers[0] = 12;
 rollnumbers[1] = 36;
 
 
 
 Advantages of arrays :
 
 1) we can use one variable name to hold multiple values
 2) we can declare an empty array and assign values to it later on 
 
 
 Disadvantages : 
 
 1) Array can hold data of same data type
 2) arrays at the time declaration we will have to specify the size, if we are not utilizing array then there is some wastage of memory
 
 
 
 
 object oriented programming (oop)
 
 class : it is a template for creating objects
 object :  object is a instance of classs 
 
 
  class : cars
 object : tata,maruthi,volvo,jaguar,BMW,Audi... etc
 
 
 
 any class can have attributes and methods 
 
 
 attributes :  these are the properties of class.
 
 if car is a class its brand, type, engine capacity etc are the attributes of class
 
 static attributes : any property of class which is common among all its object ex : no of wheels
 instance attributes : any property of class which is not common among all its object ex : brand, type, engine capacity etc... 
 
 
 methods : these are the actions which are performed by the objects of class. 
 
if car is a class its actions like start, stop, apply brakes, go into auto mode ,,, etc these are methods/ actions perfromed by the objects of class CAR


static methods : any method  of class which is common among all its object . ex : start, stop, applying brakes

instance methods : any method of class which is not common among all its object .   ex : auto mode 


Constructors :  thes are special methods in java used for working on instance variables/attribute. 

thre are two types of constructors

1) zero parametrized constructor
2) parameterized constructor


Access Modifiers in java ::

public :  
private : 


protected :
default :




package 1
class 1
public method1()



package 2
class 2
method1()  :: not possible























